name: CMake

on:
  push:
  pull_request:
    branches: [ master ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
          - os: macos-10.15
          - os: windows-2019
            BUILD_TYPE: RelWithDebInfo
            CONFIGURATION: Release

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true

# dependencies
    - name: add Debian Packages
      if: matrix.os == 'ubuntu-latest'
      uses: myci-actions/add-deb-repo@10
      with:
        repo-name: obs
        repo: deb http://download.opensuse.org/repositories/network:/messaging:/zeromq:/git-draft/xUbuntu_20.04/ ./
        keys-asc: https://download.opensuse.org/repositories/network:/messaging:/zeromq:/git-draft/xUbuntu_20.04/Release.key
        install: libzmq5 libzmq3-dev libglx-dev mesa-common-dev libasound2-dev libglew-dev libunwind-dev

    - name: Add brew packages
      if: matrix.os == 'macos-10.15'
      shell: bash
      run: brew install automake autoconf cmake

    - name: Add MSBuild to PATH
      if: matrix.os == 'windows-latest'
      uses: microsoft/setup-msbuild@v1.0.2

    - name: libZMQ Dep
      if: matrix.os == 'macos-10.15'
      run: |
        git clone https://github.com/zeromq/libzmq.git
        cd libzmq
        ./autogen.sh
        ./configure
        make
        sudo make install

    - name: libZMQ Dep Win
      if: matrix.os == 'windows-latest'
      shell: cmd
      run: |
        set INSTALL_PREFIX=${{github.workspace}}\inst
        md %INSTALL_PREFIX%
        set LIBZMQ_SOURCEDIR=${{github.workspace}}\libzmq
        set LIBZMQ_BUILDDIR=%LIBZMQ_SOURCEDIR%\build
        git clone --depth 1 --quiet https://github.com/zeromq/libzmq.git "%LIBZMQ_SOURCEDIR%"
        md %LIBZMQ_BUILDDIR%
        cd %LIBZMQ_BUILDDIR%
        cmake .. -Ax64 -DBUILD_STATIC=OFF -DBUILD_SHARED=ON -DZMQ_BUILD_TESTS=OFF -DCMAKE_INSTALL_PREFIX=%INSTALL_PREFIX%
        cmake --build . --config ${{ matrix.BUILD_TYPE }} --target install

    - name: Python dep
      if: matrix.os == 'macos-10.15'
      run: |
        ./dist/osx/build_python.sh ${{github.workspace}}/build/python
        PY_ROOT=`${{github.workspace}}/build/python/Python.framework/Versions/Current/bin/python3 -c "import sys;print(sys.base_prefix)"`
        echo "CMAKE_OPTIONS=-DPython3_ROOT_DIR=$PY_ROOT -DWITH_EMBED_PYTHON=ON -DWITH_OPENVR=OFF -DWITH_DEV=OFF" >> $GITHUB_ENV

    - name: Python dep Win
      if: matrix.os == 'windows-latest'
      shell: cmd
      run: |
        set PYTHON_SOURCEDIR=${{github.workspace}}\..\cpython
        git clone https://github.com/python/cpython.git --branch=3.8 --depth=1 "%PYTHON_SOURCEDIR%"
        set GZB_BUILDDIR=${{env.GITHUB_WORKSPACE}}/build
        set PY_INSTALLDIR=%GZB_BUILDDIR%/python
        set PY_EXE=python.exe
        set PY_LAYOUTOPTS=--include-dev --include-pip
        md %PY_INSTALLDIR%
        cd %PYTHON_SOURCEDIR%\PCbuild
        build.bat -p x64
        IF "%Configuration%" == "Debug" build.bat -p x64 -c Debug
        cd amd64
        .\%PY_EXE% ../../PC/layout -b . -s %PYTHON_SOURCEDIR% %PY_LAYOUTOPTS% --copy %PY_INSTALLDIR%
        IF "%Configuration%" == "Debug" set PY_LAYOUTOPTS=-d --include-dev --include-pip --include-symbols
        IF "%Configuration%" == "Debug" .\%PY_EXE% ../../PC/layout -b . -s %PYTHON_SOURCEDIR% %PY_LAYOUTOPTS% --copy %PY_INSTALLDIR%
        set CMAKE_OPTIONS=-Ax64 -DCMAKE_PREFIX_PATH="%INSTALL_PREFIX%" -DPython3_ROOT_DIR="%PY_INSTALLDIR%" -DWITH_EMBED_PYTHON=ON -DWITH_DEV=OFF

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} $CMAKE_OPTIONS

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Pack
      if: matrix.os == 'macos-10.15'
      working-directory: ${{github.workspace}}/build
      run: cpack -V

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}} -VV

    - name: Upload file via SSH only on push
      working-directory: ${{github.workspace}}/build
      if: github.event_name == 'push'
      env:
        BBPWD: ${{ secrets.BBPWD }}
      run: |
        git fetch --all --tags
        if [ "${RUNNER_OS}" == "Linux" ]; then zip -q -r $( echo $GITHUB_REPOSITORY | cut -d"/" -f2)_${RUNNER_OS}_$( git describe --tag --always --dirty --abbrev=4).zip * -x "*/test/*" "*/__pycache__/*"; fi
        if [ ! -d "$HOME/.ssh" ]; then mkdir $HOME/.ssh; fi
        echo '|1|AurlN3z7WhvxYbuNdsouT5s7FYs=|cjTFODbUXIXKeWihh1BjnfXgARw= ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFxUlmYnS6gItSE4QuXpJxVFqhatyadmYaSQ+GPYwna9bs3KoWxfYl2j0ijA4aVAPPZLjLAjNbxd26fIrocW5fQ=' >> $HOME/.ssh/known_hosts
        git clone https://github.com/clarkwang/passh.git
        cd passh
        cc -o passh passh.c
        ./passh -p env:BBPWD scp ../gazebosc_*_* buildbot@pong.hku.nl:public_html/gazebosc/
